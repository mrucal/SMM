package practica4;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Mario
 */
public class Lienzo extends javax.swing.JPanel {
    
    private Point p, p1, p2, origen;
    private int anchura,altura;
    private Color color;
    private Boolean relleno;
    private Herramienta herramienta;
    
    public Lienzo() {
        initComponents();
        reinicia();
    }

    public void reinicia(){
        p = new Point(-10,-10);
        p1 = new Point(-10,-10);
        p2 = new Point(-10,-10);
        origen = new Point(-10,-10);
        anchura = altura = 0;
        color = Color.black;
        relleno = false;
        herramienta = Herramienta.Punto;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        p = evt.getPoint();
        this.repaint();                      
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        p1 = evt.getPoint();
        origen = (Point) p1.clone();
    }//GEN-LAST:event_formMousePressed

    private void obtenerP2(java.awt.event.MouseEvent evt){
        p2 = evt.getPoint();
        anchura = p2.x - p1.x;
        altura = p2.y - p1.y;
        if (anchura < 0)
            origen.x = p1.x+anchura;
        if (altura < 0)
            origen.y = p1.y+altura;
        anchura = Math.abs(anchura);
        altura = Math.abs(altura);
    }
    
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        obtenerP2(evt);
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        obtenerP2(evt);
        this.repaint();
    }//GEN-LAST:event_formMouseDragged
    
    public void paint(Graphics g){
        super.paint(g);
        g.setColor(color);
        switch(herramienta.ordinal()){
            case 0:
                g.fillOval(p.x-5,p.y-5,10,10);
                break;
            case 1:
                g.drawLine(p1.x, p1.y, p2.x, p2.y);
                break;
            case 2:
                if (relleno)
                    g.fillRect(origen.x, origen.y, anchura, altura);
                else
                    g.drawRect(origen.x, origen.y, anchura, altura);
                break;
            case 3:
                if (relleno)
                    g.fillOval(origen.x, origen.y, anchura, altura);
                else
                    g.drawOval(origen.x, origen.y, anchura, altura);
                break;
        }        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }
    
    public Boolean getRelleno() {
        return relleno;
    }

    public void setRelleno(Boolean relleno) {
        this.relleno = relleno;
    }
    
    public Herramienta getHerramienta() {
        return herramienta;
    }

    public void setHerramienta(Herramienta herramienta) {
        this.herramienta = herramienta;
    }
}
