/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica6_2;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.TextAttribute;
import java.awt.geom.AffineTransform;
import java.awt.geom.Area;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Mario
 */
public class Lienzo extends javax.swing.JPanel {
    private Rectangle rectangulo;
    private Point pAux;
    
    List<Shape> vShape = new ArrayList();
    
    boolean editar;
    boolean relleno;
    boolean ventanaClipActiva;
    String tipoFuente;
    
    Ellipse2D clipArea = new Ellipse2D.Float(100,100,500,500);

    public boolean isEditar() {
        return editar;
    }

    public void setEditar(boolean editar) {
        this.editar = editar;
    }

    public boolean isRelleno() {
        return relleno;
    }

    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
    }

    public boolean isVentanaClipActiva() {
        return ventanaClipActiva;
    }

    public void setVentanaClipActiva(boolean ventanaClipActiva) {
        this.ventanaClipActiva = ventanaClipActiva;
    }

    public String getFuente() {
        return tipoFuente;
    }

    public void setFuente(String fuente) {
        this.tipoFuente = fuente;
    }
    
    Shape seleccionado;
    
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        editar = false;
        relleno = false;
        ventanaClipActiva = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        pAux = evt.getPoint();
        if (!editar){
            
            rectangulo = new Rectangle(pAux);
            vShape.add(rectangulo);
        }else{
            seleccionado = getSelectedShape(evt.getPoint());
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(!ventanaClipActiva){
            if(!editar){
                rectangulo.setFrameFromDiagonal(pAux, evt.getPoint());
            }else{
                if(seleccionado!=null){
                    Rectangle r = (Rectangle)seleccionado;
                    r.setLocation((int) (r.getX() + evt.getPoint().getX() - pAux.getX()),(int) (r.getY() + evt.getPoint().getY() - pAux.getY()));
                    pAux = evt.getPoint();
                }
            }
            this.repaint();
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        this. formMouseDragged(evt);
    }//GEN-LAST:event_formMouseReleased

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if(ventanaClipActiva){
            Point corner = evt.getPoint();
            corner.translate((int)clipArea.getWidth()/2,
            (int)clipArea.getHeight()/2);
            clipArea.setFrameFromCenter(evt.getPoint(), corner);
            this.repaint();
        }
    }//GEN-LAST:event_formMouseMoved
    
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        
        int x2Points[] = {0, 50, 100, 100,50,0,0};
        int y2Points[] = {0, 50, 0, 50,100,50,0};
        GeneralPath polyline = new GeneralPath(GeneralPath.WIND_EVEN_ODD, x2Points.length);

        polyline.moveTo (x2Points[0]+40, y2Points[0]);

        for (int index = 1; index < x2Points.length; index++) {
            x2Points[index] += 40;
            //y2Points[index] += 100;
            polyline.lineTo(x2Points[index], y2Points[index]);
        }
        
        Rectangle r = new Rectangle(0,0,40,200);
        Rectangle r2 = new Rectangle(140,0,40,200);
        /*g2d.draw(polyline);
        g2d.draw(r);*/
        Area area1 = new Area(polyline);
        
        area1.add(new Area(r));
        area1.add(new Area(r2));
        
        g2d.fill(area1);
        /*if (ventanaClipActiva) {
            g2d.setClip(clipArea);
            g2d.draw(clipArea);
        }
        this.setAtributos(g2d);
        for(Shape s:vShape)
            if(relleno)
                g2d.fill(s);
            else
                g2d.draw(s);
        */
    }
    
    private void setAtributos(Graphics2D g2d){
        Stroke trazo;
        float patronDiscontinuidad[] = {15.0f, 15.0f};
        trazo = new BasicStroke(10.0f, BasicStroke.CAP_ROUND, BasicStroke.JOIN_MITER,1.0f,patronDiscontinuidad, 0.0f);
        g2d.setStroke(trazo);
        g2d.draw(new Line2D.Float(40,40,160,160));
        
        Paint relleno;
        relleno = new Color(255,100,0);
        g2d.setPaint(relleno);
        g2d.draw(new Rectangle(170,40,120,120));
        g2d.fill(new Rectangle(300,40,120,120));
        
        Point pc1 = new Point(430,40), pc2 = new Point(550,160);
        relleno = new GradientPaint(pc1,Color.RED, pc2, Color.BLUE);
        g2d.setPaint(relleno);
        g2d.fill(new Rectangle(430,40,120,120));
        g2d.draw(new Line2D.Float(240,240,360,360));
        Composite comp;
        comp = AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.5f);
        g2d.setComposite(comp);
        g2d.fill(new Rectangle(190,100,200,120));
        
        Rectangle r = new Rectangle(430, 190, 120, 120);
        g2d.draw(r); //Dibujamos rectángulo sin transformación
        AffineTransform at;
        at = AffineTransform.getRotateInstance(Math.toRadians(45.0),r.getCenterX(), r.getCenterY());
        g2d.setTransform(at);
        g2d.fill(r);
        
        at = AffineTransform.getScaleInstance(0.5,0.5);
        g2d.setTransform(at);
        g2d.draw(r);
        
        at.setToIdentity();
        at.translate(r.getCenterX(),r.getCenterY());
        at.scale(0.5,0.5);
        at.translate(-r.getCenterX(),-r.getCenterY());
        g2d.setTransform(at);
        g2d.draw(r);
        
        at.setToIdentity();
        at.translate(r.getCenterX(),r.getCenterY());
        at.scale(0.25,0.25);
        at.rotate(Math.toRadians(45.0));
        at.translate(-r.getCenterX(),-r.getCenterY());
        g2d.setTransform(at);
        g2d.draw(r);
        
        at.setToIdentity();
        g2d.setTransform(at);
        
        Font fuente;
        fuente = new Font(this.tipoFuente, Font.BOLD | Font.ITALIC, 45);
        g2d.setFont(fuente);
        g2d.drawString("Hola", 30, 220);
        
        Map atributosTexto = fuente.getAttributes();
        atributosTexto.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        g2d.setFont( new Font(atributosTexto) );
        g2d.drawString("mundo", 30, 260);
        
        RenderingHints render;
        g2d.draw(new Ellipse2D.Float(40,350,510,50)); //Elipse sin antialiasing
        render = new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setRenderingHints(render);
        g2d.draw(new Ellipse2D.Float(40,450,510,50)); //Elipse con antialiasing
        g2d.drawString("Hola", 30, 170); //Texto con antialiasing
        
        if(!ventanaClipActiva){
            Shape clipArea;
            clipArea = new Ellipse2D.Float(100,100,500,500);
            g2d.setClip(clipArea);
            g2d.draw(clipArea);
        }
    }
    
    private Shape getSelectedShape(Point2D p){
        for(Shape s:vShape)
            if(s.contains(p)) return s;
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
